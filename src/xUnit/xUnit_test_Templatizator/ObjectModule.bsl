Перем КонтекстЯдра;
Перем Ожидаем;

Перем ЭтоЗначениеЗаполняетсяПередЗапускомТеста;
Перем ЭтоЗначениеЗаполняетсяПослеЗапускаТеста;
Перем ТекстИсключенияПадающегоТеста;

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
		
		НаборТестов.НачатьГруппу("Переменные и коллекции");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьВыводПеременнойИзДанныхШаблона");
	НаборТестов.Добавить("ТестДолжен_ПроверитьВыводМассиваЧерезЦиклСоСчетчиком");
	НаборТестов.Добавить("ТестДолжен_ПроверитьВыводТаблицыЧерезЦиклДляКаждого");
	
		НаборТестов.НачатьГруппу("УсловиеКогдаИстинаВСекцииЕсли");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_Иначе_КогдаИстинаВСекцииЕсли");
	НаборТестов.Добавить("ТестДолжен_ПроверитьУсловие_Если_Иначе_КогдаИстинаВСекцииЕсли");
	НаборТестов.Добавить("ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_КогдаИстинаВСекцииЕсли");
	НаборТестов.Добавить("ТестДолжен_ПроверитьУсловие_Если_КогдаИстинаВСекцииЕсли");
	
		НаборТестов.НачатьГруппу("УсловиеКогдаИстинаВСекцииИначеЕсли");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_Иначе_КогдаИстинаВСекцииИначеЕсли");
	НаборТестов.Добавить("ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_КогдаИстинаВСекцииИначеЕсли");
	
		НаборТестов.НачатьГруппу("УсловиеКогдаИстинаВСекцииИначе");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_Иначе_КогдаИстинаВСекцииИначе");
	НаборТестов.Добавить("ТестДолжен_ПроверитьУсловие_Если_Иначе_КогдаИстинаВСекцииИначе");
	
		НаборТестов.НачатьГруппу("УсловиеКогдаУсловиеНеВыполняется");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_КогдаУсловиеНеВыполняется");
	НаборТестов.Добавить("ТестДолжен_ПроверитьУсловие_Если_КогдаУсловиеНеВыполняется");
	
		НаборТестов.НачатьГруппу("Коллекции-чтение через точку");

	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтениеЧерезДвеТочки");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтениеЧерезТочкуОтИтератораЦикла");
	
		НаборТестов.НачатьГруппу("Сложные выражения в условиях");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьСложноеУсловие_Если_Иначе_КогдаИстинаВСекцииЕсли");
	
		НаборТестов.НачатьГруппу("Работа с типом Дата");
		
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтениеТипаДата");
	
		НаборТестов.НачатьГруппу("Вложенные циклы. Доступ к итераторм верхнего уровня");
	
	НаборТестов.Добавить("ТестДолжен_ПроверитьДоступКИтераторуВерхнегоУровня"); 
	
	//
	//НаборТестов.НачатьГруппу("Фильтрация");
	//НаборТестов.Добавить("ТестДолжен_ПроверитьВыборочныйЗапускТестов_ФильтрЭлементов");
	//НаборТестов.Добавить("ТестДолжен_ПроверитьВыборочныйЗапускТестов_ФильтрКонтейнеров");
	//НаборТестов.Добавить("ТестДолжен_ПроверитьВыборочныйЗапускТестов_СмешанныйФильтр");
	//
	//НаборТестов.НачатьГруппу("Статистика");
	//НаборТестов.Добавить("ТестДолжен_ПроверитьВРезультатеТестирования_ЗаполнениеСтатистики");
	//
	//НаборТестов.НачатьГруппу("Тесты с параметрами");
	//НаборТестов.Добавить("ТестДолжен_ПроверитьВыполнениеТеста_ОдинПараметр");
	//НаборТестов.Добавить("ТестДолжен_ПроверитьВыполнениеТеста_НесколькоПараметров");
	//
	//НаборТестов.НачатьГруппу("Режимы выполнения тестов (случайный и строгий)");
	//НаборТестов.Добавить("ТестДолжен_Проверить_ЧтоПоУмолчанию_ТестыВыполняютсяВСлучайномПорядке");
	//НаборТестов.Добавить("ТестДолжен_Проверить_ЧтоТестыВыполняютсяСтрогоПоПорядку");
	//НаборТестов.Добавить("ТестДолжен_Проверить_ЧтоПадениеОдногоТестаВКонтейнереСоСтрогимПорядком_ПриводитКПропускуОставшихсяШагов");
	//НаборТестов.Добавить("ТестДолжен_Проверить_ЧтоПадениеОдногоТестаВКонтейнереСоСтрогимПорядком_ПриводитКПропускуДочернихКонтейнеров");
	//НаборТестов.Добавить("ТестДолжен_Проверить_ЧтоПадениеТестовВКонтейнереСоСлучайнымПорядком_НеВлияетНаДругиеТестовыеМетоды");
	//
	//НаборТестов.НачатьГруппу("Передача контекста");
	//НаборТестов.Добавить("ТестДолжен_ПроверитьПередачуКонтекстаВЗависимыхТестах");
	//НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоСохранятьКонтекстМожноТолькоВРамкахКонтейнераСоСтрогимПорядкомВыполнения");
	//НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоПолучатьКонтекстМожноТолькоВРамкахКонтейнераСоСтрогимПорядкомВыполнения");
	
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
	ЭтоЗначениеЗаполняетсяПередЗапускомТеста = Истина;
	ЭтоЗначениеЗаполняетсяПослеЗапускаТеста = Неопределено;
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	ЭтоЗначениеЗаполняетсяПослеЗапускаТеста = Истина;
КонецПроцедуры

Процедура ПередЗапускомТеста_СОшибкой() Экспорт
	ВызватьИсключение "ПередЗапускомТеста_СОшибкой";
КонецПроцедуры

Процедура ПослеЗапускаТеста_СОшибкой() Экспорт
	ВызватьИсключение "ПослеЗапускаТеста_СОшибкой";
КонецПроцедуры

// { Templatizator

Процедура ТестДолжен_ПроверитьВыводПеременнойИзДанныхШаблона() Экспорт
	
	Obj = Обработки.Templatizator.Создать();
	
	// Поместим в данные одну переменную, чтобы вывести ее в шаблон
	TemplateData = New Structure;
	TemplateData.Вставить("Title", "Creating HTML by templates in Django/Flask style");
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{{ &w.Title }}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|Creating HTML by templates in Django/Flask style
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

// сервисный метод
//
Функция GetJSONFromTemplateData(Obj, TemplateData)
		
	Obj.TemplateData = TemplateData;
	
	JSON = Obj.GetTemplateDataIntoJSONServer();
	
	Obj.TemplateData = Undefined;
	
	Return JSON;
	
КонецФункции
 
Процедура ТестДолжен_ПроверитьВыводМассиваЧерезЦиклСоСчетчиком() Экспорт
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	МассивЭлементов = Новый Массив;
	Для сч = 1 По 5 Цикл
		МассивЭлементов.Добавить(сч);	
	КонецЦикла; 
	TemplateData.Вставить("МассивЭлементов",МассивЭлементов);
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<ul>
    |	{% For count = 0 To 4 Do %}
	|		<li>счетчик {{ count }}, Элемент массива {{ &w.МассивЭлементов[count] }}</li>
    |	{% EndDo %}
    |</ul>	
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<ul>
	|<li>счетчик 0, Элемент массива 1</li>
	|<li>счетчик 1, Элемент массива 2</li>
	|<li>счетчик 2, Элемент массива 3</li>
	|<li>счетчик 3, Элемент массива 4</li>
	|<li>счетчик 4, Элемент массива 5</li>
	|</ul>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыводТаблицыЧерезЦиклДляКаждого() Экспорт
	
	// таблица должна быть представлена в виде массива структур!
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;

	// таблицу с данными сделаем в виде массива структур, на всякий случай, чтобы и на клиенте работало
	ТаблицаДанных = Новый Массив;
	СтруктураДанных = Новый Структура;
	НомерСтроки = 1;
	СтруктураДанных.Вставить("RowNum", НомерСтроки);
	СтруктураДанных.Вставить("Account", "Account #5678967890 at Standard Chartered Bank");
	СтруктураДанных.Вставить("TotalAmount", "USD 8.993.340");
	ТаблицаДанных.Добавить(СтруктураДанных);
	НомерСтроки=НомерСтроки+1;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("RowNum", НомерСтроки);
	СтруктураДанных.Вставить("Account", "Account #1100000 at HSBC Singapore");
	СтруктураДанных.Вставить("TotalAmount", "USD 1.000.000");
	ТаблицаДанных.Добавить(СтруктураДанных);
	НомерСтроки=НомерСтроки+1;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("RowNum", НомерСтроки);
	СтруктураДанных.Вставить("Account", "Account #7674839302 at Barclays bank");
	СтруктураДанных.Вставить("TotalAmount", "GBP 34.554");
	ТаблицаДанных.Добавить(СтруктураДанных);
	НомерСтроки=НомерСтроки+1;

	TemplateData.Вставить("ТаблицаДанных", ТаблицаДанных);

	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<table>
    |    <tr>
	|	 <th>#</th>
    |    <th>Account</th>
    |    <th>Total amount</th>
    |    </tr>
    |{% For Each СтрокаДанных In &w.ТаблицаДанных Do %}
    |    <tr>
	|	 <td>{{ СтрокаДанных.RowNum }}</td>
    |    <td style=""text-align: left;"">{{ СтрокаДанных.Account }}</td>
    |    <td>{{ СтрокаДанных.TotalAmount }}</td>
    |    </tr>
    |{% EndDo %}
    |</table>
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<table>
	|<tr>
	|<th>#</th>
	|<th>Account</th>
	|<th>Total amount</th>
	|</tr>
	|<tr>
	|<td>1</td>
	|<td style=""text-align: left;"">Account #5678967890 at Standard Chartered Bank</td>
	|<td>USD 8.993.340</td>
	|</tr>
	|<tr>
	|<td>2</td>
	|<td style=""text-align: left;"">Account #1100000 at HSBC Singapore</td>
	|<td>USD 1.000.000</td>
	|</tr>
	|<tr>
	|<td>3</td>
	|<td style=""text-align: left;"">Account #7674839302 at Barclays bank</td>
	|<td>GBP 34.554</td>
	|</tr>
	|</table>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

// Если
Процедура ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_Иначе_КогдаИстинаВСекцииЕсли() Экспорт
	
	// тест условия, когда есть все ветки: Если, ИначеЕсли, Иначе
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% If 1=1 Then %}
	|    <p>секция ЕСЛИ - тест ОК</p>
	|{% ElsIf 1=2 Then %}
	|    <p>секция ИНАЧЕ ЕСЛИ</p>
	|{% Else %}
	|    <p>секция ИНАЧЕ</p>
	|{% EndIf %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p>секция ЕСЛИ - тест ОК</p>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУсловие_Если_Иначе_КогдаИстинаВСекцииЕсли() Экспорт
	
	// тест условия, когда есть ветки: Если, Иначе
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% If 1=1 Then %}
	|    <p>секция ЕСЛИ - тест ОК</p>
	|{% Else %}
	|    <p>секция ИНАЧЕ</p>
	|{% EndIf %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p>секция ЕСЛИ - тест ОК</p>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_КогдаИстинаВСекцииЕсли() Экспорт
	
	// тест условия, когда есть ветки: Если, ИначеЕсли
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% If 1=1 Then %}
	|    <p>секция ЕСЛИ - тест ОК</p>
	|{% ElsIf 1=2 Then %}
	|    <p>секция ИНАЧЕ ЕСЛИ</p>
	|{% EndIf %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p>секция ЕСЛИ - тест ОК</p>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУсловие_Если_КогдаИстинаВСекцииЕсли() Экспорт
	
	// тест условия, когда есть только одна ветка: Если
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% If 1=1 Then %}
	|    <p>секция ЕСЛИ - тест ОК</p>
	|{% EndIf %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p>секция ЕСЛИ - тест ОК</p>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

// ИначеЕсли
Процедура ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_Иначе_КогдаИстинаВСекцииИначеЕсли() Экспорт
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% IF 1=2 Then %}
	|    <p>секция ЕСЛИ - тест FAILED</p>
	|{% ElsIf 2=2 Then %}
	|    <p>секция ИНАЧЕ ЕСЛИ-test OK</p>
	|{% Else %}
	|    <p>секция ИНАЧЕ-test FAILED</p>
	|{% EndIf %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p>секция ИНАЧЕ ЕСЛИ-test OK</p>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_КогдаИстинаВСекцииИначеЕсли() Экспорт
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% IF 1=2 Then %}
	|    <p>секция ЕСЛИ - тест FAILED</p>
	|{% ElsIf 2=2 Then %}
	|    <p>секция ИНАЧЕ ЕСЛИ-test OK</p>
	|{% EndIf %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p>секция ИНАЧЕ ЕСЛИ-test OK</p>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

// Иначе

Процедура ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_Иначе_КогдаИстинаВСекцииИначе() Экспорт
	
	// тест условия, когда есть все ветки: Если, ИначеЕсли, Иначе
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% If 1=2 Then %}
	|   <p>секция ЕСЛИ - тест FAILED</p> 
	|{% ElsIf 1=2 Then %}
	|    <p>секция ИНАЧЕ ЕСЛИ - тест FAILED</p>
	|{% Else %}
	|	<p> секция ИНАЧЕ - тест ОК</p>
	|{% EndIf %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p> секция ИНАЧЕ - тест ОК</p>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУсловие_Если_Иначе_КогдаИстинаВСекцииИначе() Экспорт
	
	// тест условия, когда есть ветки: Если, Иначе
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% If 1=2 Then %}
	|   <p>секция ЕСЛИ - тест FAILED</p> 
	|{% Else %}
	|	<p> секция ИНАЧЕ - тест ОК</p>
	|{% EndIf %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p> секция ИНАЧЕ - тест ОК</p>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

// Условие не выполняется

Процедура ТестДолжен_ПроверитьУсловие_Если_ИначеЕсли_КогдаУсловиеНеВыполняется() Экспорт
	
	// тест условия, когда есть ветки: Если, ИначеЕсли
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% If 1=3 Then %}
	|    <p>секция ЕСЛИ - тест ОК</p>
	|{% ElsIf 1=2 Then %}
	|    <p>секция ИНАЧЕ ЕСЛИ</p>
	|{% EndIf %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУсловие_Если_КогдаУсловиеНеВыполняется() Экспорт
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% If 1=3 Then %}
	|    <p>секция ЕСЛИ - тест ОК</p>
	|{% EndIf %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

// Коллекции-чтение через точку

Процедура ТестДолжен_ПроверитьЧтениеЧерезДвеТочки() Экспорт
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	// Для теста второго уровня вложенности коллекций
	TemplateData.Вставить("Контрагент", 
		Новый Структура("Имя,Адрес", "Банк ФК Открытие", 
			Новый Структура("Город", "Москва")));
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p> Контрагент ""{{ &w.Контрагент.Имя }}""<br>
	|Контрагент.Адрес.Город ""{{ &w.Контрагент.Адрес.Город }}""</p>
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p> Контрагент ""Банк ФК Открытие""<br>
	|Контрагент.Адрес.Город ""Москва""</p>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтениеЧерезТочкуОтИтератораЦикла() Экспорт
	
	Obj = Обработки.Templatizator.Создать();
	
	TemplateData = New Structure;
	// таблицу с данными сделаем в виде массива структур, на всякий случай, чтобы и на клиенте работало
	ТаблицаДанныхДляТестаУсловия = Новый Массив;
	СтруктураДанных = Новый Структура;
	НомерСтроки = 1;
	СтруктураДанных.Вставить("RowNum", НомерСтроки);
	СтруктураДанных.Вставить("Amount", 5000);
	ТаблицаДанныхДляТестаУсловия.Добавить(СтруктураДанных);
	НомерСтроки=НомерСтроки+1;
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("RowNum", НомерСтроки);
	СтруктураДанных.Вставить("Amount", 2000);
	ТаблицаДанныхДляТестаУсловия.Добавить(СтруктураДанных);
	НомерСтроки=НомерСтроки+1;
	
	TemplateData.Вставить("ТаблицаДанныхДляТестаУсловия",ТаблицаДанныхДляТестаУсловия);

	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<h4>Тест условия в цикле. В выражении условия используется чтение через точку. </h4>
	|<p>Должны выполниться секции Если и Иначе. </p>
	|<p>Строка с суммой 5000 выводится жирным шрифтом <br>
	|Строка с суммой 2000 выводится курсивом</p>
	|<table>
    |    <tr>
    |    <th>RowNum</th>
    |    <th>Amount</th>
    |    </tr>
    |{% For Each СтрокаТаблицы In &w.ТаблицаДанныхДляТестаУсловия Do %}	
	|	{% Если СтрокаТаблицы.Amount=5000 Тогда %}
	|	    <tr>
	|	    <td><b>{{ СтрокаТаблицы.RowNum }}</b></td>
	|	    <td><b>{{ СтрокаТаблицы.Amount }}</b></td>
	|	    </tr>
	|	{% Иначе %}
	|	    <tr>
	|		<td><i>{{ СтрокаТаблицы.RowNum }}</i></td>
	|	    <td><i>{{ СтрокаТаблицы.Amount }}</i></td>
	|	    </tr>		 
	|	{% КонецЕсли %}  		
    |{% EndDo %}
    |</table>
	|<h4>Тест условия конец</h4> 
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, TemplateData);
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<h4>Тест условия в цикле. В выражении условия используется чтение через точку. </h4>
	|<p>Должны выполниться секции Если и Иначе. </p>
	|<p>Строка с суммой 5000 выводится жирным шрифтом <br>
	|Строка с суммой 2000 выводится курсивом</p>
	|<table>
	|<tr>
	|<th>RowNum</th>
	|<th>Amount</th>
	|</tr>
	|<tr>
	|<td><b>1</b></td>
	|<td><b>5 000</b></td>
	|</tr>
	|<tr>
	|<td><i>2</i></td>
	|<td><i>2 000</i></td>
	|</tr>
	|</table>
	|<h4>Тест условия конец</h4>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

// Сложное выражение в условии.

Процедура ТестДолжен_ПроверитьСложноеУсловие_Если_Иначе_КогдаИстинаВСекцииЕсли() Экспорт
	
	// тест условия, когда есть ветки: Если, Иначе
	
	Obj = Обработки.Templatizator.Создать();
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% For Each СтрокаТаблицы In &w.ТаблицаДанныхДляТестаУсловия Do %}
	|	{% If СтрокаТаблицы.Amount=5000 И СтрокаТаблицы[""Amount""]=5000 И 1=1 Then %}
	|   	<p>{{СтрокаТаблицы.RowNum}}секция ЕСЛИ - тест ОК</p>
	|	{% Else %}
	|   	<p>{{СтрокаТаблицы.RowNum}}секция ИНАЧЕ</p>
	|	{% EndIf %}
	|{% EndDo %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, Obj.CreateTemplateData());
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p>1секция ЕСЛИ - тест ОК</p>
	|<p>2секция ИНАЧЕ</p>
	|</body>
	|</html>
	|" );
	
КонецПроцедуры

// Чтение типа "Дата".

Процедура ТестДолжен_ПроверитьЧтениеТипаДата() Экспорт
	
	Obj = Обработки.Templatizator.Создать();
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p> report date {{ReportDate}} </p>
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, Obj.CreateTemplateData());
	
	Ожидаем.Что( Obj.CreateHTMLServer("ReportDate") ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p> report date 29.04.2019 0:00:00 </p>
	|</body>
	|</html>
	|" );
	
	Ожидаем.Что( Obj.TemplateData.ReportDate ).Равно( '20190429' );
	
КонецПроцедуры

// вложенные циклы. доступ к итераторм верхнего уровня
    
Процедура ТестДолжен_ПроверитьДоступКИтераторуВерхнегоУровня() Экспорт
	
	
	Obj = Обработки.Templatizator.Создать();
	
	Obj.TemplateText = "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|{% For Each СтрокаТаблицы In &w.ТаблицаДанныхДляТестаУсловия Do %}
	|		
	|		{% For Each Строка_Таблицы2 In &w.ВложеннаяТаблицаДанныхДляТестаУсловия Do %}
	|		
	|			{% Если СтрокаТаблицы.Amount=5000 И Строка_Таблицы2.RowNum=1 Тогда %}
	|				<p>Проверка доступа к переменной верхнего уровня из вложенного цикла - ОК</p>
	|			{% КонецЕсли %}
	|			
	|		{% EndDo %}
	|		
	|   {% EndDo %}
	|</body>
	|</html>
	|";
	
	Obj.JSON = GetJSONFromTemplateData(Obj, Obj.CreateTemplateData());
	
	Ожидаем.Что( Obj.CreateHTMLServer() ).Равно( "<!DOCTYPE html>
	|<html>
	|<head>
	|</head>
	|<body>
	|<p>Проверка доступа к переменной верхнего уровня из вложенного цикла - ОК</p>
	|</body>
	|</html>
	|" );
	
	
КонецПроцедуры


// } Templatizator

// { Выполнение тестов

Процедура ТестДолжен_ПроверитьВызов_ПередЗапускомТеста() Экспорт
	Ожидаем.Что(ЭтоЗначениеЗаполняетсяПередЗапускомТеста).ЭтоИстина();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРезультатТестированияУспешныйМетода() Экспорт
	ДанныеУспешногоТеста = КонтекстЯдра.Плагин("ПостроительДереваТестов").СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	РезультатТестирования = КонтекстЯдра.ВыполнитьТестовыйМетод(ЭтотОбъект, ДанныеУспешногоТеста);
	
	Ожидаем.Что(РезультатТестирования, "РезультатТестирования").ИмеетТип("Структура");
	Ожидаем.Что(РезультатТестирования.Путь, "РезультатТестирования.Путь").Равно(ДанныеУспешногоТеста.Путь);
	Ожидаем.Что(РезультатТестирования.ИмяМетода, "РезультатТестирования.ИмяМетода").Равно(ДанныеУспешногоТеста.ИмяМетода);
	Ожидаем.Что(РезультатТестирования.Состояние, "РезультатТестирования.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.Сообщение, "РезультатТестирования.Сообщение").Равно("");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРезультатТестированияПадающегоМетода() Экспорт
	ТекстИсключенияПадающегоТеста = "КАБУМ!!!";
	ДанныеПадающегоТеста = КонтекстЯдра.Плагин("ПостроительДереваТестов").СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "МетодПадающийПоУтверждению");
	РезультатТестирования = КонтекстЯдра.ВыполнитьТестовыйМетод(ЭтотОбъект, ДанныеПадающегоТеста);
	
	Ожидаем.Что(РезультатТестирования, "РезультатТестирования").ИмеетТип("Структура");
	Ожидаем.Что(РезультатТестирования.Путь, "РезультатТестирования.Путь").Равно(ДанныеПадающегоТеста.Путь);
	Ожидаем.Что(РезультатТестирования.ИмяМетода, "РезультатТестирования.ИмяМетода").Равно(ДанныеПадающегоТеста.ИмяМетода);
	Ожидаем.Что(РезультатТестирования.Состояние, "РезультатТестирования.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Сломан);
	Ожидаем.Что(РезультатТестирования.Сообщение, "РезультатТестирования.Сообщение").Содержит(ТекстИсключенияПадающегоТеста);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРезультатТестированияОтсутствующегоМетода() Экспорт
	ДанныеОтсутствующегоТеста = КонтекстЯдра.Плагин("ПостроительДереваТестов").СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "ОтсутствующийМетод");
	РезультатТестирования = КонтекстЯдра.ВыполнитьТестовыйМетод(ЭтотОбъект, ДанныеОтсутствующегоТеста);
	
	Ожидаем.Что(РезультатТестирования, "РезультатТестирования").ИмеетТип("Структура");
	Ожидаем.Что(РезультатТестирования.Путь, "РезультатТестирования.Путь").Равно(ДанныеОтсутствующегоТеста.Путь);
	Ожидаем.Что(РезультатТестирования.ИмяМетода, "РезультатТестирования.ИмяМетода").Равно(ДанныеОтсутствующегоТеста.ИмяМетода);
	Ожидаем.Что(РезультатТестирования.Состояние, "РезультатТестирования.Состояние").Равно(КонтекстЯдра.СостоянияТестов.НеРеализован);
	Ожидаем.Что(РезультатТестирования.Сообщение, "РезультатТестирования.Сообщение").Содержит(ДанныеОтсутствующегоТеста.ИмяМетода);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВызов_ПослеЗапускаТеста() Экспорт
	ДанныеУспешногоТеста = КонтекстЯдра.Плагин("ПостроительДереваТестов").СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	РезультатТестирования = КонтекстЯдра.ВыполнитьТестовыйМетод(ЭтотОбъект, ДанныеУспешногоТеста);
	
	Ожидаем.Что(ЭтоЗначениеЗаполняетсяПослеЗапускаТеста).ЭтоИстина();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВызов_ПослеЗапускаТеста_УПадающегоТеста() Экспорт
	ДанныеПадающегоТеста = КонтекстЯдра.Плагин("ПостроительДереваТестов").СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "МетодПадающийПоУтверждению");
	РезультатТестирования = КонтекстЯдра.ВыполнитьТестовыйМетод(ЭтотОбъект, ДанныеПадающегоТеста);
	
	Ожидаем.Что(РезультатТестирования.Состояние).Равно(КонтекстЯдра.СостоянияТестов.Сломан);
	Ожидаем.Что(ЭтоЗначениеЗаполняетсяПослеЗапускаТеста).ЭтоИстина();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРезультатТеста_Когда_ПередЗапускаТеста_СОшибкой() Экспорт
	ДанныеУспешногоТеста = КонтекстЯдра.Плагин("ПостроительДереваТестов").СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	ДанныеУспешногоТеста.ПередЗапускомТеста = "ПередЗапускомТеста_СОшибкой";
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТестовыйМетод(ЭтотОбъект, ДанныеУспешногоТеста);
	
	Ожидаем.Что(РезультатТестирования.Состояние).Равно(КонтекстЯдра.СостоянияТестов.НеизвестнаяОшибка);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРезультатТеста_Когда_ПослеЗапускаТеста_СОшибкой() Экспорт
	ДанныеУспешногоТеста = КонтекстЯдра.Плагин("ПостроительДереваТестов").СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	ДанныеУспешногоТеста.ПослеЗапускаТеста = "ПослеЗапускаТеста_СОшибкой";
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТестовыйМетод(ЭтотОбъект, ДанныеУспешногоТеста);
	
	Ожидаем.Что(РезультатТестирования.Состояние).Равно(КонтекстЯдра.СостоянияТестов.НеизвестнаяОшибка);
КонецПроцедуры
// } Выполнение тестов

// { Фильтрация
Процедура ТестДолжен_ПроверитьВыборочныйЗапускТестов_ФильтрЭлементов() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер");
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	Контейнер.Строки.Добавить(Элемент3);
	
	Фильтр = Новый Массив;
	Фильтр.Добавить(Элемент2.Ключ);
	Фильтр.Добавить(Элемент3.Ключ);
	
	Ожидаем.Что(КонтекстЯдра.ПолучитьКоличествоТестовыхМетодов(Контейнер, Фильтр), "Общее количество тестовых методов").Равно(Фильтр.Количество());
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер, Фильтр);
	
	Ожидаем.Что(РезультатТестирования.Состояние, "Контейнер").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.Строки.Количество(), "Количество тестовых методов").Равно(Фильтр.Количество());
	
	РезультатТеста_Элемент1 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Элемент1.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент1, "РезультатТеста_Элемент1").ЭтоНеопределено();
	
	РезультатТеста_Элемент2 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Элемент2.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент2.Ключ, "Тест2.Ключ").Равно(Элемент2.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент2.Состояние, "Тест2 Пройден").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	
	РезультатТеста_Элемент3 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Элемент3.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент3.Ключ, "Тест3.Ключ").Равно(Элемент3.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент3.Состояние, "Тест3 Пройден").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыборочныйЗапускТестов_ФильтрКонтейнеров() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	
	Контейнер1 = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер1");
	Контейнер1.Строки.Добавить(Элемент1);
	
	Контейнер2 = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер2");
	Контейнер2.Строки.Добавить(Элемент2);
	
	Контейнер3 = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер3");
	Контейнер3.Строки.Добавить(Элемент3);
	
	Корень = ПостроительДереваТестов.СоздатьКонтейнер("Корень");
	Корень.Строки.Добавить(Контейнер1);
	Корень.Строки.Добавить(Контейнер2);
	Корень.Строки.Добавить(Контейнер3);
	
	Фильтр = Новый Массив;
	Фильтр.Добавить(Контейнер2.Ключ);
	Фильтр.Добавить(Контейнер3.Ключ);
	
	Ожидаем.Что(КонтекстЯдра.ПолучитьКоличествоТестовыхМетодов(Корень, Фильтр), "Общее количество тестовых методов").Равно(2);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Корень, Фильтр);
	
	Ожидаем.Что(РезультатТестирования.Ключ, "Корень.Ключ").Равно(Корень.Ключ);
	Ожидаем.Что(РезультатТестирования.Состояние, "Корень.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.Строки.Количество(), "Количество дочерних узлов").Равно(Фильтр.Количество());
	
	РезультатТеста_Контейнер1 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Контейнер1.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер1, "РезультатТеста_Контейнер1").ЭтоНеопределено();
	
	РезультатТеста_Контейнер2 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Контейнер2.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер2.Ключ, "Контейнер2.Ключ").Равно(Контейнер2.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер2.Состояние, "Контейнер2.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТеста_Контейнер2.Строки[0].Ключ, "Контейнер2.Элемент2.Ключ").Равно(Элемент2.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер2.Строки[0].Состояние, "Контейнер2.Элемент2.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	
	РезультатТеста_Контейнер3 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Контейнер3.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер3.Ключ, "Контейнер3.Ключ").Равно(Контейнер3.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер3.Состояние, "Контейнер2.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТеста_Контейнер3.Строки[0].Ключ, "Контейнер3.Элемент3.Ключ").Равно(Элемент3.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер3.Строки[0].Состояние, "Контейнер3.Элемент3.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыборочныйЗапускТестов_СмешанныйФильтр() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	
	Контейнер1 = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер1");
	Контейнер1.Строки.Добавить(Элемент1);
	Контейнер1.Строки.Добавить(Элемент2);
	
	Контейнер2 = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер2");
	Контейнер2.Строки.Добавить(Элемент3);
	
	Корень = ПостроительДереваТестов.СоздатьКонтейнер("Корень");
	Корень.Строки.Добавить(Контейнер1);
	Корень.Строки.Добавить(Контейнер2);
	
	Фильтр = Новый Массив;
	Фильтр.Добавить(Элемент2.Ключ);
	Фильтр.Добавить(Контейнер2.Ключ);
	
	Ожидаем.Что(КонтекстЯдра.ПолучитьКоличествоТестовыхМетодов(Корень, Фильтр), "Общее количество тестовых методов").Равно(2);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Корень, Фильтр);
	
	Ожидаем.Что(РезультатТестирования.Ключ, "Корень.Ключ").Равно(Корень.Ключ);
	Ожидаем.Что(РезультатТестирования.Состояние, "Корень.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.Строки.Количество(), "Количество дочерних узлов").Равно(2);
	
	РезультатТеста_Контейнер1 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Контейнер1.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер1.Ключ, "Контейнер1.Ключ").Равно(Контейнер1.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер1.Состояние, "Контейнер1.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТеста_Контейнер1.Строки.Количество(), "Контейнер1 количество дочерних узлов").Равно(1);
	РезультатТеста_Элемент1 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТеста_Контейнер1, Элемент1.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент1, "РезультатТеста_Элемент1").ЭтоНеопределено();
	РезультатТеста_Элемент2 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТеста_Контейнер1, Элемент2.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент2.Ключ, "Контейнер1.Элемент2.Ключ").Равно(Элемент2.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент2.Состояние, "Контейнер1.Элемент2.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	
	РезультатТеста_Контейнер2 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТестирования, Контейнер2.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер2.Ключ, "Контейнер2.Ключ").Равно(Контейнер2.Ключ);
	Ожидаем.Что(РезультатТеста_Контейнер2.Состояние, "Контейнер2.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	РезультатТеста_Элемент3 = КонтекстЯдра.НайтиРезультатТестированияПоИдентификатору(РезультатТеста_Контейнер2, Элемент3.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент3.Ключ, "Контейнер2.Элемент3.Ключ").Равно(Элемент3.Ключ);
	Ожидаем.Что(РезультатТеста_Элемент3.Состояние, "Контейнер2.Элемент3.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
КонецПроцедуры
// } Фильтрация

// { Статистика
Процедура ТестДолжен_ПроверитьВРезультатеТестирования_ЗаполнениеСтатистики() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	УспешныйЭлемент = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	ПадающийЭлемент = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "МетодПадающийПоУтверждению");
	ОтсутствующийЭлемент = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "ОтсутствующийМетод");
	ОшибочныйЭлемент = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "МетодПадающийПоНеизвестнойОшибке");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер");
	Контейнер.Строки.Добавить(УспешныйЭлемент);
	Контейнер.Строки.Добавить(ПадающийЭлемент);
	Контейнер.Строки.Добавить(ОтсутствующийЭлемент);
	Контейнер.Строки.Добавить(ОшибочныйЭлемент);
	
	Ожидаем.Что(КонтекстЯдра.ПолучитьКоличествоТестовыхМетодов(Контейнер), "Общее количество тестовых методов").Равно(Контейнер.Строки.Количество());
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
	
	Ожидаем.Что(РезультатТестирования.КоличествоТестов).Равно(Контейнер.Строки.Количество());
	Ожидаем.Что(РезультатТестирования.КоличествоСломанныхТестов).Равно(1);
	Ожидаем.Что(РезультатТестирования.КоличествоНеРеализованныхТестов).Равно(1);
	Ожидаем.Что(РезультатТестирования.КоличествоОшибочныхТестов).Равно(1);
	Ожидаем.Что(РезультатТестирования.ВремяВыполнения).Существует();
КонецПроцедуры
// } Статистика

// { Тесты с параметрами
Процедура ТестДолжен_ПроверитьВыполнениеТеста_ОдинПараметр() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "ТестСложенияСОднимПараметром");
	Элемент1.Параметры.Добавить(Новый Структура("Значение1, Значение2, Результат", 1, 5, 6));
	
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "ТестСложенияСОднимПараметром");
	Элемент2.Параметры.Добавить(Новый Структура("Значение1, Значение2, Результат", "Раз", "-Два", "Раз-Два"));
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер");
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
	
	Ожидаем.Что(РезультатТестирования.Состояние, "Состояние всех результатов тестирования").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.КоличествоТестов).Равно(Контейнер.Строки.Количество());
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыполнениеТеста_НесколькоПараметров() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "ТестСложенияСНесколькимиПараметрами");
	Элемент1.Параметры.Добавить(1);
	Элемент1.Параметры.Добавить(5);
	Элемент1.Параметры.Добавить(6);
	
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "ТестСложенияСНесколькимиПараметрами");
	Элемент2.Параметры.Добавить("Раз");
	Элемент2.Параметры.Добавить("-Два");
	Элемент2.Параметры.Добавить("Раз-Два");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер");
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
	
	Ожидаем.Что(РезультатТестирования.Состояние, "Состояние всех результатов тестирования").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.КоличествоТестов).Равно(Контейнер.Строки.Количество());
КонецПроцедуры
// } Тесты с параметрами

// { Режимы выполнения тестов (случайный и строгий)
Процедура ТестДолжен_Проверить_ЧтоПоУмолчанию_ТестыВыполняютсяВСлучайномПорядке() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер");
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	Контейнер.Строки.Добавить(Элемент3);
	
	МаксимальноеКоличествоПопыток = 100;
	Для Сч = 1 По МаксимальноеКоличествоПопыток Цикл
		РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
		Если РезультатТестирования.Строки[0].Ключ <> Элемент1.Ключ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Ожидаем.Что(Сч, "Порядок в результатах тестирования должен отличаться от порядка в дереве тестов").Меньше(МаксимальноеКоличествоПопыток);
КонецПроцедуры

Процедура ТестДолжен_Проверить_ЧтоТестыВыполняютсяСтрогоПоПорядку() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер");
	Контейнер.СлучайныйПорядокВыполнения = Ложь;
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	Контейнер.Строки.Добавить(Элемент3);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
	
	Ожидаем.Что(РезультатТестирования.Строки[0].Ключ, "Элемент1").Равно(Элемент1.Ключ);
	Ожидаем.Что(РезультатТестирования.Строки[1].Ключ, "Элемент2").Равно(Элемент2.Ключ);
	Ожидаем.Что(РезультатТестирования.Строки[2].Ключ, "Элемент3").Равно(Элемент3.Ключ);
КонецПроцедуры

Процедура ТестДолжен_Проверить_ЧтоПадениеОдногоТестаВКонтейнереСоСтрогимПорядком_ПриводитКПропускуОставшихсяШагов() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "МетодПадающийПоУтверждению");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер");
	Контейнер.СлучайныйПорядокВыполнения = Ложь;
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	Контейнер.Строки.Добавить(Элемент3);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
	
	Ожидаем.Что(РезультатТестирования.Строки).ИмеетДлину(3);
	Ожидаем.Что(РезультатТестирования.Строки[0].Ключ, "Элемент1.Ключ").Равно(Элемент1.Ключ);
	Ожидаем.Что(РезультатТестирования.Строки[0].Состояние, "Элемент1.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.Строки[1].Ключ, "Элемент2.Ключ").Равно(Элемент2.Ключ);
	Ожидаем.Что(РезультатТестирования.Строки[1].Состояние, "Элемент2.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Сломан);
КонецПроцедуры

Процедура ТестДолжен_Проверить_ЧтоПадениеОдногоТестаВКонтейнереСоСтрогимПорядком_ПриводитКПропускуДочернихКонтейнеров() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "МетодПадающийПоУтверждению");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	
	ДочернийКонтейнер = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер");
	ДочернийКонтейнер.Строки.Добавить(Элемент3);
	
	Корень = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер");
	Корень.СлучайныйПорядокВыполнения = Ложь;
	Корень.Строки.Добавить(Элемент1);
	Корень.Строки.Добавить(Элемент2);
	Корень.Строки.Добавить(ДочернийКонтейнер);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Корень);
	
	Ожидаем.Что(РезультатТестирования.Строки).ИмеетДлину(3);
	Ожидаем.Что(РезультатТестирования.Строки[1].Ключ, "Элемент2.Ключ").Равно(Элемент2.Ключ);
	Ожидаем.Что(РезультатТестирования.Строки[1].Состояние, "Элемент2.Состояние").Равно(КонтекстЯдра.СостоянияТестов.Сломан);
КонецПроцедуры

Процедура ТестДолжен_Проверить_ЧтоПадениеТестовВКонтейнереСоСлучайнымПорядком_НеВлияетНаДругиеТестовыеМетоды() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "МетодПадающийПоУтверждению");
	Элемент3 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "УспешныйМетод");
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер");
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	Контейнер.Строки.Добавить(Элемент3);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
	
	Ожидаем.Что(РезультатТестирования.Строки).ИмеетДлину(3);
КонецПроцедуры
// } Режимы выполнения тестов (случайный и строгий)

// { Передача контекста
Процедура ТестДолжен_ПроверитьПередачуКонтекстаВЗависимыхТестах() Экспорт
	ПостроительДереваТестов = КонтекстЯдра.Плагин("ПостроительДереваТестов");
	
	Элемент1 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "ТестСохраняющийКонтекст_ПервоеЗначение");
	Элемент1.Параметры.Добавить(5);
	
	Элемент2 = ПостроительДереваТестов.СоздатьЭлемент(ЭтотОбъект.ИспользуемоеИмяФайла, "ТестИспользующийКонтекст_СуммируетПервоеЗначениеВтороеЗначениеИПроверяетРезультат");
	Элемент2.Параметры.Добавить(7);
	Элемент2.Параметры.Добавить(12);
	
	Контейнер = ПостроительДереваТестов.СоздатьКонтейнер("Контейнер");
	Контейнер.СлучайныйПорядокВыполнения = Ложь;
	Контейнер.Строки.Добавить(Элемент1);
	Контейнер.Строки.Добавить(Элемент2);
	
	РезультатТестирования = КонтекстЯдра.ВыполнитьТесты(ЗагрузчикЗаглушка(), Контейнер);
	
	Ожидаем.Что(РезультатТестирования.Состояние, "Состояние всех результатов тестирования").Равно(КонтекстЯдра.СостоянияТестов.Пройден);
	Ожидаем.Что(РезультатТестирования.КоличествоТестов).Равно(Контейнер.Строки.Количество());
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоСохранятьКонтекстМожноТолькоВРамкахКонтейнераСоСтрогимПорядкомВыполнения() Экспорт
	// Ожидаем, что этот контейнер со случайным порядком выполнения
	Ожидаем.Что(КонтекстЯдра)
		.Метод("СохранитьКонтекст", КонтекстЯдра.ПараметрыМетода(Истина))
		.ВыбрасываетИсключение(КонтекстЯдра.ВозможныеИсключения.СохранятьКонтекстТолькоВСтрогомРежиме);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоПолучатьКонтекстМожноТолькоВРамкахКонтейнераСоСтрогимПорядкомВыполнения() Экспорт
	// Ожидаем, что этот контейнер со случайным порядком выполнения
	Ожидаем.Что(КонтекстЯдра)
		.Метод("ПолучитьКонтекст")
		.ВыбрасываетИсключение(КонтекстЯдра.ВозможныеИсключения.ПолучатьКонтекстТолькоВСтрогомРежиме);
КонецПроцедуры
// } Передача контекста

// Методы нужные для тестов
Функция ЗагрузчикЗаглушка()
	Возврат ЭтотОбъект;
КонецФункции

Функция ПолучитьКонтекстПоПути(КонтекстЯдра, Путь) Экспорт
	Возврат ЭтотОбъект;
КонецФункции

Процедура УспешныйМетод() Экспорт
КонецПроцедуры

Процедура МетодПадающийПоУтверждению() Экспорт
	КонтекстЯдра.ВызватьОшибкуПроверки(ТекстИсключенияПадающегоТеста);
КонецПроцедуры

Процедура МетодПадающийПоНеизвестнойОшибке() Экспорт
	ВызватьИсключение "Ошибка!!!";
КонецПроцедуры

Процедура ТестСложенияСОднимПараметром(Параметры) Экспорт
	Ожидаем.Что(Параметры.Значение1 + Параметры.Значение2).Равно(Параметры.Результат);
КонецПроцедуры

Процедура ТестСложенияСНесколькимиПараметрами(Слагаемое1, Слагаемое2, Результат) Экспорт
	Ожидаем.Что(Слагаемое1 + Слагаемое2).Равно(Результат);
КонецПроцедуры

Процедура ТестСохраняющийКонтекст_ПервоеЗначение(ПервоеЗначение) Экспорт
	КонтекстЯдра.СохранитьКонтекст(ПервоеЗначение);
КонецПроцедуры

Процедура ТестИспользующийКонтекст_СуммируетПервоеЗначениеВтороеЗначениеИПроверяетРезультат(ВтороеЗначение, Результат) Экспорт
	ПервоеЗначение = КонтекстЯдра.ПолучитьКонтекст();
	Ожидаем.Что(ПервоеЗначение + ВтороеЗначение).Равно(Результат);
КонецПроцедуры